plugins {
    id 'java'

    id 'eclipse'
    id 'idea'

    id 'maven'
    id 'nebula.provided-base' version '3.1.0'

    id 'net.minecrell.licenser' version '0.3'
}

group = 'org.spongepowered'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

archivesBaseName = 'lwts'

repositories {
    mavenCentral()
    maven {
        name = 'minecraft'
        url = 'https://libraries.minecraft.net'
    }
}

dependencies {
    compile 'net.minecraft:launchwrapper:1.12'
    compile 'junit:junit:4.12'

    compile 'com.google.guava:guava:17.0'

    provided 'com.google.code.findbugs:jsr305:1.3.9'
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

license {
    header = file('HEADER.txt')
    newLine = false
    ext {
        name = project.name
        organization = project.organization
        url = project.url
    }
}

def pom = {
    artifactId = project.archivesBaseName

    project {
        name = project.archivesBaseName
        description = project.description
        packaging = 'jar'
        url = project.url

        scm {
            url = "https://github.com/$project.organization/$project.name"
            connection = "scm:git:https://github.com/$project.organization/${project.name}.git"
            developerConnection = "scm:git:git@github.com:$project.organization/${project.name}.git"
        }

        issueManagement {
            system = 'GitHub Issues'
            url = "https://github.com/$project.organization/$project.name/issues"
        }

        licenses {
            license {
                name = 'MIT License'
                url = 'http://opensource.org/licenses/MIT'
                distribution = 'repo'
            }
        }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        // This is set by the build server when deploying to the repo
        if (project.hasProperty('spongeRepo')) {
            repository(url: project.spongeRepo) {
                if (project.hasProperty('spongeUsername') && project.hasProperty('spongePassword')) {
                    authentication(userName: project.spongeUsername, password: project.spongePassword)
                }
            }
        }

        it.pom pom
    }
}

install {
    repositories.mavenInstaller {
        it.pom pom
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = project.gradleVersion
}
